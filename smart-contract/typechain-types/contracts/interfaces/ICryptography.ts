/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export type BlindSchnorrSigStruct = {
  e0: PromiseOrValue<BigNumberish>;
  e: PromiseOrValue<BigNumberish>;
};

export type BlindSchnorrSigStructOutput = [BigNumber, BigNumber] & {
  e0: BigNumber;
  e: BigNumber;
};

export type SchnorrSignatureStruct = {
  e0: PromiseOrValue<BigNumberish>;
  s0: PromiseOrValue<BigNumberish>;
};

export type SchnorrSignatureStructOutput = [BigNumber, BigNumber] & {
  e0: BigNumber;
  s0: BigNumber;
};

export interface ICryptographyInterface extends utils.Interface {
  functions: {
    "blindAbeOkamotoMessage(uint256,uint256,uint256,uint256,uint256,uint256,uint256,address,uint256)": FunctionFragment;
    "blindSchnorrMessage(uint256,uint256,uint256,uint256,address)": FunctionFragment;
    "prepareAbeOkamotoMessage(uint256,uint256)": FunctionFragment;
    "signAbeOkamotoMessage(uint256,uint256,uint256)": FunctionFragment;
    "signBlindSchnorrMessage(uint256,uint256,uint256)": FunctionFragment;
    "unblindAbeOkamotoMessage(uint256,uint256,uint256,uint256,uint256,uint256)": FunctionFragment;
    "unblindBlindSchnorrMessage(uint256,uint256,uint256)": FunctionFragment;
    "verifyAbeOkamotoSignature(uint256,uint256,address,uint256,uint256,uint256,uint256)": FunctionFragment;
    "verifyElgamaSignature(uint256,uint256,uint256,uint256)": FunctionFragment;
    "verifySchnorrSignature((uint256,uint256),address,uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "blindAbeOkamotoMessage"
      | "blindSchnorrMessage"
      | "prepareAbeOkamotoMessage"
      | "signAbeOkamotoMessage"
      | "signBlindSchnorrMessage"
      | "unblindAbeOkamotoMessage"
      | "unblindBlindSchnorrMessage"
      | "verifyAbeOkamotoSignature"
      | "verifyElgamaSignature"
      | "verifySchnorrSignature"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "blindAbeOkamotoMessage",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "blindSchnorrMessage",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "prepareAbeOkamotoMessage",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "signAbeOkamotoMessage",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "signBlindSchnorrMessage",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "unblindAbeOkamotoMessage",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "unblindBlindSchnorrMessage",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "verifyAbeOkamotoSignature",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "verifyElgamaSignature",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "verifySchnorrSignature",
    values: [
      SchnorrSignatureStruct,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "blindAbeOkamotoMessage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "blindSchnorrMessage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "prepareAbeOkamotoMessage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "signAbeOkamotoMessage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "signBlindSchnorrMessage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unblindAbeOkamotoMessage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unblindBlindSchnorrMessage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "verifyAbeOkamotoSignature",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "verifyElgamaSignature",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "verifySchnorrSignature",
    data: BytesLike
  ): Result;

  events: {};
}

export interface ICryptography extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ICryptographyInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    blindAbeOkamotoMessage(
      a: PromiseOrValue<BigNumberish>,
      b: PromiseOrValue<BigNumberish>,
      t1: PromiseOrValue<BigNumberish>,
      t2: PromiseOrValue<BigNumberish>,
      t3: PromiseOrValue<BigNumberish>,
      t4: PromiseOrValue<BigNumberish>,
      z: PromiseOrValue<BigNumberish>,
      m: PromiseOrValue<string>,
      y: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    blindSchnorrMessage(
      r: PromiseOrValue<BigNumberish>,
      alpha: PromiseOrValue<BigNumberish>,
      beta: PromiseOrValue<BigNumberish>,
      y: PromiseOrValue<BigNumberish>,
      m: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BlindSchnorrSigStructOutput]>;

    prepareAbeOkamotoMessage(
      u: PromiseOrValue<BigNumberish>,
      info: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber, BigNumber]>;

    signAbeOkamotoMessage(
      u: PromiseOrValue<BigNumberish>,
      e: PromiseOrValue<BigNumberish>,
      x: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    signBlindSchnorrMessage(
      prk: PromiseOrValue<BigNumberish>,
      K: PromiseOrValue<BigNumberish>,
      e: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    unblindAbeOkamotoMessage(
      t1: PromiseOrValue<BigNumberish>,
      t2: PromiseOrValue<BigNumberish>,
      t3: PromiseOrValue<BigNumberish>,
      t4: PromiseOrValue<BigNumberish>,
      r: PromiseOrValue<BigNumberish>,
      c: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber, BigNumber, BigNumber]>;

    unblindBlindSchnorrMessage(
      s: PromiseOrValue<BigNumberish>,
      alpha: PromiseOrValue<BigNumberish>,
      e0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[SchnorrSignatureStructOutput]>;

    verifyAbeOkamotoSignature(
      y: PromiseOrValue<BigNumberish>,
      z: PromiseOrValue<BigNumberish>,
      m: PromiseOrValue<string>,
      rho: PromiseOrValue<BigNumberish>,
      omega: PromiseOrValue<BigNumberish>,
      sigma: PromiseOrValue<BigNumberish>,
      delta: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    verifyElgamaSignature(
      m: PromiseOrValue<BigNumberish>,
      r: PromiseOrValue<BigNumberish>,
      s: PromiseOrValue<BigNumberish>,
      y: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    verifySchnorrSignature(
      sig: SchnorrSignatureStruct,
      m: PromiseOrValue<string>,
      pk: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  blindAbeOkamotoMessage(
    a: PromiseOrValue<BigNumberish>,
    b: PromiseOrValue<BigNumberish>,
    t1: PromiseOrValue<BigNumberish>,
    t2: PromiseOrValue<BigNumberish>,
    t3: PromiseOrValue<BigNumberish>,
    t4: PromiseOrValue<BigNumberish>,
    z: PromiseOrValue<BigNumberish>,
    m: PromiseOrValue<string>,
    y: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  blindSchnorrMessage(
    r: PromiseOrValue<BigNumberish>,
    alpha: PromiseOrValue<BigNumberish>,
    beta: PromiseOrValue<BigNumberish>,
    y: PromiseOrValue<BigNumberish>,
    m: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BlindSchnorrSigStructOutput>;

  prepareAbeOkamotoMessage(
    u: PromiseOrValue<BigNumberish>,
    info: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber, BigNumber]>;

  signAbeOkamotoMessage(
    u: PromiseOrValue<BigNumberish>,
    e: PromiseOrValue<BigNumberish>,
    x: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber]>;

  signBlindSchnorrMessage(
    prk: PromiseOrValue<BigNumberish>,
    K: PromiseOrValue<BigNumberish>,
    e: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  unblindAbeOkamotoMessage(
    t1: PromiseOrValue<BigNumberish>,
    t2: PromiseOrValue<BigNumberish>,
    t3: PromiseOrValue<BigNumberish>,
    t4: PromiseOrValue<BigNumberish>,
    r: PromiseOrValue<BigNumberish>,
    c: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber, BigNumber, BigNumber]>;

  unblindBlindSchnorrMessage(
    s: PromiseOrValue<BigNumberish>,
    alpha: PromiseOrValue<BigNumberish>,
    e0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<SchnorrSignatureStructOutput>;

  verifyAbeOkamotoSignature(
    y: PromiseOrValue<BigNumberish>,
    z: PromiseOrValue<BigNumberish>,
    m: PromiseOrValue<string>,
    rho: PromiseOrValue<BigNumberish>,
    omega: PromiseOrValue<BigNumberish>,
    sigma: PromiseOrValue<BigNumberish>,
    delta: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  verifyElgamaSignature(
    m: PromiseOrValue<BigNumberish>,
    r: PromiseOrValue<BigNumberish>,
    s: PromiseOrValue<BigNumberish>,
    y: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  verifySchnorrSignature(
    sig: SchnorrSignatureStruct,
    m: PromiseOrValue<string>,
    pk: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    blindAbeOkamotoMessage(
      a: PromiseOrValue<BigNumberish>,
      b: PromiseOrValue<BigNumberish>,
      t1: PromiseOrValue<BigNumberish>,
      t2: PromiseOrValue<BigNumberish>,
      t3: PromiseOrValue<BigNumberish>,
      t4: PromiseOrValue<BigNumberish>,
      z: PromiseOrValue<BigNumberish>,
      m: PromiseOrValue<string>,
      y: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    blindSchnorrMessage(
      r: PromiseOrValue<BigNumberish>,
      alpha: PromiseOrValue<BigNumberish>,
      beta: PromiseOrValue<BigNumberish>,
      y: PromiseOrValue<BigNumberish>,
      m: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BlindSchnorrSigStructOutput>;

    prepareAbeOkamotoMessage(
      u: PromiseOrValue<BigNumberish>,
      info: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber, BigNumber]>;

    signAbeOkamotoMessage(
      u: PromiseOrValue<BigNumberish>,
      e: PromiseOrValue<BigNumberish>,
      x: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    signBlindSchnorrMessage(
      prk: PromiseOrValue<BigNumberish>,
      K: PromiseOrValue<BigNumberish>,
      e: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    unblindAbeOkamotoMessage(
      t1: PromiseOrValue<BigNumberish>,
      t2: PromiseOrValue<BigNumberish>,
      t3: PromiseOrValue<BigNumberish>,
      t4: PromiseOrValue<BigNumberish>,
      r: PromiseOrValue<BigNumberish>,
      c: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber, BigNumber, BigNumber]>;

    unblindBlindSchnorrMessage(
      s: PromiseOrValue<BigNumberish>,
      alpha: PromiseOrValue<BigNumberish>,
      e0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<SchnorrSignatureStructOutput>;

    verifyAbeOkamotoSignature(
      y: PromiseOrValue<BigNumberish>,
      z: PromiseOrValue<BigNumberish>,
      m: PromiseOrValue<string>,
      rho: PromiseOrValue<BigNumberish>,
      omega: PromiseOrValue<BigNumberish>,
      sigma: PromiseOrValue<BigNumberish>,
      delta: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    verifyElgamaSignature(
      m: PromiseOrValue<BigNumberish>,
      r: PromiseOrValue<BigNumberish>,
      s: PromiseOrValue<BigNumberish>,
      y: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    verifySchnorrSignature(
      sig: SchnorrSignatureStruct,
      m: PromiseOrValue<string>,
      pk: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {};

  estimateGas: {
    blindAbeOkamotoMessage(
      a: PromiseOrValue<BigNumberish>,
      b: PromiseOrValue<BigNumberish>,
      t1: PromiseOrValue<BigNumberish>,
      t2: PromiseOrValue<BigNumberish>,
      t3: PromiseOrValue<BigNumberish>,
      t4: PromiseOrValue<BigNumberish>,
      z: PromiseOrValue<BigNumberish>,
      m: PromiseOrValue<string>,
      y: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    blindSchnorrMessage(
      r: PromiseOrValue<BigNumberish>,
      alpha: PromiseOrValue<BigNumberish>,
      beta: PromiseOrValue<BigNumberish>,
      y: PromiseOrValue<BigNumberish>,
      m: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    prepareAbeOkamotoMessage(
      u: PromiseOrValue<BigNumberish>,
      info: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    signAbeOkamotoMessage(
      u: PromiseOrValue<BigNumberish>,
      e: PromiseOrValue<BigNumberish>,
      x: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    signBlindSchnorrMessage(
      prk: PromiseOrValue<BigNumberish>,
      K: PromiseOrValue<BigNumberish>,
      e: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    unblindAbeOkamotoMessage(
      t1: PromiseOrValue<BigNumberish>,
      t2: PromiseOrValue<BigNumberish>,
      t3: PromiseOrValue<BigNumberish>,
      t4: PromiseOrValue<BigNumberish>,
      r: PromiseOrValue<BigNumberish>,
      c: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    unblindBlindSchnorrMessage(
      s: PromiseOrValue<BigNumberish>,
      alpha: PromiseOrValue<BigNumberish>,
      e0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    verifyAbeOkamotoSignature(
      y: PromiseOrValue<BigNumberish>,
      z: PromiseOrValue<BigNumberish>,
      m: PromiseOrValue<string>,
      rho: PromiseOrValue<BigNumberish>,
      omega: PromiseOrValue<BigNumberish>,
      sigma: PromiseOrValue<BigNumberish>,
      delta: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    verifyElgamaSignature(
      m: PromiseOrValue<BigNumberish>,
      r: PromiseOrValue<BigNumberish>,
      s: PromiseOrValue<BigNumberish>,
      y: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    verifySchnorrSignature(
      sig: SchnorrSignatureStruct,
      m: PromiseOrValue<string>,
      pk: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    blindAbeOkamotoMessage(
      a: PromiseOrValue<BigNumberish>,
      b: PromiseOrValue<BigNumberish>,
      t1: PromiseOrValue<BigNumberish>,
      t2: PromiseOrValue<BigNumberish>,
      t3: PromiseOrValue<BigNumberish>,
      t4: PromiseOrValue<BigNumberish>,
      z: PromiseOrValue<BigNumberish>,
      m: PromiseOrValue<string>,
      y: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    blindSchnorrMessage(
      r: PromiseOrValue<BigNumberish>,
      alpha: PromiseOrValue<BigNumberish>,
      beta: PromiseOrValue<BigNumberish>,
      y: PromiseOrValue<BigNumberish>,
      m: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    prepareAbeOkamotoMessage(
      u: PromiseOrValue<BigNumberish>,
      info: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    signAbeOkamotoMessage(
      u: PromiseOrValue<BigNumberish>,
      e: PromiseOrValue<BigNumberish>,
      x: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    signBlindSchnorrMessage(
      prk: PromiseOrValue<BigNumberish>,
      K: PromiseOrValue<BigNumberish>,
      e: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    unblindAbeOkamotoMessage(
      t1: PromiseOrValue<BigNumberish>,
      t2: PromiseOrValue<BigNumberish>,
      t3: PromiseOrValue<BigNumberish>,
      t4: PromiseOrValue<BigNumberish>,
      r: PromiseOrValue<BigNumberish>,
      c: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    unblindBlindSchnorrMessage(
      s: PromiseOrValue<BigNumberish>,
      alpha: PromiseOrValue<BigNumberish>,
      e0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    verifyAbeOkamotoSignature(
      y: PromiseOrValue<BigNumberish>,
      z: PromiseOrValue<BigNumberish>,
      m: PromiseOrValue<string>,
      rho: PromiseOrValue<BigNumberish>,
      omega: PromiseOrValue<BigNumberish>,
      sigma: PromiseOrValue<BigNumberish>,
      delta: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    verifyElgamaSignature(
      m: PromiseOrValue<BigNumberish>,
      r: PromiseOrValue<BigNumberish>,
      s: PromiseOrValue<BigNumberish>,
      y: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    verifySchnorrSignature(
      sig: SchnorrSignatureStruct,
      m: PromiseOrValue<string>,
      pk: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
