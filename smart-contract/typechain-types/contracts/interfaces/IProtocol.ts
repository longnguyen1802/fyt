/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export interface IProtocolInterface extends utils.Interface {
  functions: {
    "bidForNextSigner()": FunctionFragment;
    "closeDeploymentState()": FunctionFragment;
    "endRound()": FunctionFragment;
    "formNewMR(uint256)": FunctionFragment;
    "initialMemberRegister()": FunctionFragment;
    "onboardMember(uint256,uint256)": FunctionFragment;
    "receiveTransaction(uint256,uint256,uint256,uint256,uint256)": FunctionFragment;
    "refundUnsuccessSigner()": FunctionFragment;
    "requestRefer()": FunctionFragment;
    "sendReferRequest(uint256,uint256)": FunctionFragment;
    "sendTransaction(uint256,uint256)": FunctionFragment;
    "signReferRequest(uint256,uint256)": FunctionFragment;
    "signTransaction(address,uint256,uint256)": FunctionFragment;
    "startNewRound()": FunctionFragment;
    "startRequestRefer(address,uint256)": FunctionFragment;
    "unlockMR(uint256,uint256)": FunctionFragment;
    "validityCheck()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "bidForNextSigner"
      | "closeDeploymentState"
      | "endRound"
      | "formNewMR"
      | "initialMemberRegister"
      | "onboardMember"
      | "receiveTransaction"
      | "refundUnsuccessSigner"
      | "requestRefer"
      | "sendReferRequest"
      | "sendTransaction"
      | "signReferRequest"
      | "signTransaction"
      | "startNewRound"
      | "startRequestRefer"
      | "unlockMR"
      | "validityCheck"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "bidForNextSigner",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "closeDeploymentState",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "endRound", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "formNewMR",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "initialMemberRegister",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "onboardMember",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "receiveTransaction",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "refundUnsuccessSigner",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "requestRefer",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "sendReferRequest",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "sendTransaction",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "signReferRequest",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "signTransaction",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "startNewRound",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "startRequestRefer",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "unlockMR",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "validityCheck",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "bidForNextSigner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "closeDeploymentState",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "endRound", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "formNewMR", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "initialMemberRegister",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onboardMember",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "receiveTransaction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "refundUnsuccessSigner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requestRefer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sendReferRequest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sendTransaction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "signReferRequest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "signTransaction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "startNewRound",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "startRequestRefer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unlockMR", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "validityCheck",
    data: BytesLike
  ): Result;

  events: {};
}

export interface IProtocol extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IProtocolInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    bidForNextSigner(
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    closeDeploymentState(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    endRound(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    formNewMR(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    initialMemberRegister(
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    onboardMember(
      e: PromiseOrValue<BigNumberish>,
      s: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    receiveTransaction(
      money: PromiseOrValue<BigNumberish>,
      rho: PromiseOrValue<BigNumberish>,
      delta: PromiseOrValue<BigNumberish>,
      omega: PromiseOrValue<BigNumberish>,
      sigma: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    refundUnsuccessSigner(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    requestRefer(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    sendReferRequest(
      nonce: PromiseOrValue<BigNumberish>,
      e: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    sendTransaction(
      index: PromiseOrValue<BigNumberish>,
      e: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    signReferRequest(
      nonce: PromiseOrValue<BigNumberish>,
      s: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    signTransaction(
      account: PromiseOrValue<string>,
      e: PromiseOrValue<BigNumberish>,
      r: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    startNewRound(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    startRequestRefer(
      account: PromiseOrValue<string>,
      nonce: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    unlockMR(
      index: PromiseOrValue<BigNumberish>,
      e: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    validityCheck(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  bidForNextSigner(
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  closeDeploymentState(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  endRound(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  formNewMR(
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  initialMemberRegister(
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  onboardMember(
    e: PromiseOrValue<BigNumberish>,
    s: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  receiveTransaction(
    money: PromiseOrValue<BigNumberish>,
    rho: PromiseOrValue<BigNumberish>,
    delta: PromiseOrValue<BigNumberish>,
    omega: PromiseOrValue<BigNumberish>,
    sigma: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  refundUnsuccessSigner(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  requestRefer(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  sendReferRequest(
    nonce: PromiseOrValue<BigNumberish>,
    e: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  sendTransaction(
    index: PromiseOrValue<BigNumberish>,
    e: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  signReferRequest(
    nonce: PromiseOrValue<BigNumberish>,
    s: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  signTransaction(
    account: PromiseOrValue<string>,
    e: PromiseOrValue<BigNumberish>,
    r: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  startNewRound(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  startRequestRefer(
    account: PromiseOrValue<string>,
    nonce: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  unlockMR(
    index: PromiseOrValue<BigNumberish>,
    e: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  validityCheck(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    bidForNextSigner(overrides?: CallOverrides): Promise<void>;

    closeDeploymentState(overrides?: CallOverrides): Promise<void>;

    endRound(overrides?: CallOverrides): Promise<void>;

    formNewMR(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    initialMemberRegister(overrides?: CallOverrides): Promise<void>;

    onboardMember(
      e: PromiseOrValue<BigNumberish>,
      s: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    receiveTransaction(
      money: PromiseOrValue<BigNumberish>,
      rho: PromiseOrValue<BigNumberish>,
      delta: PromiseOrValue<BigNumberish>,
      omega: PromiseOrValue<BigNumberish>,
      sigma: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    refundUnsuccessSigner(overrides?: CallOverrides): Promise<void>;

    requestRefer(overrides?: CallOverrides): Promise<void>;

    sendReferRequest(
      nonce: PromiseOrValue<BigNumberish>,
      e: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    sendTransaction(
      index: PromiseOrValue<BigNumberish>,
      e: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    signReferRequest(
      nonce: PromiseOrValue<BigNumberish>,
      s: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    signTransaction(
      account: PromiseOrValue<string>,
      e: PromiseOrValue<BigNumberish>,
      r: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    startNewRound(overrides?: CallOverrides): Promise<void>;

    startRequestRefer(
      account: PromiseOrValue<string>,
      nonce: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    unlockMR(
      index: PromiseOrValue<BigNumberish>,
      e: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    validityCheck(overrides?: CallOverrides): Promise<void>;
  };

  filters: {};

  estimateGas: {
    bidForNextSigner(
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    closeDeploymentState(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    endRound(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    formNewMR(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    initialMemberRegister(
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    onboardMember(
      e: PromiseOrValue<BigNumberish>,
      s: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    receiveTransaction(
      money: PromiseOrValue<BigNumberish>,
      rho: PromiseOrValue<BigNumberish>,
      delta: PromiseOrValue<BigNumberish>,
      omega: PromiseOrValue<BigNumberish>,
      sigma: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    refundUnsuccessSigner(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    requestRefer(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    sendReferRequest(
      nonce: PromiseOrValue<BigNumberish>,
      e: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    sendTransaction(
      index: PromiseOrValue<BigNumberish>,
      e: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    signReferRequest(
      nonce: PromiseOrValue<BigNumberish>,
      s: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    signTransaction(
      account: PromiseOrValue<string>,
      e: PromiseOrValue<BigNumberish>,
      r: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    startNewRound(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    startRequestRefer(
      account: PromiseOrValue<string>,
      nonce: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    unlockMR(
      index: PromiseOrValue<BigNumberish>,
      e: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    validityCheck(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    bidForNextSigner(
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    closeDeploymentState(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    endRound(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    formNewMR(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    initialMemberRegister(
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    onboardMember(
      e: PromiseOrValue<BigNumberish>,
      s: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    receiveTransaction(
      money: PromiseOrValue<BigNumberish>,
      rho: PromiseOrValue<BigNumberish>,
      delta: PromiseOrValue<BigNumberish>,
      omega: PromiseOrValue<BigNumberish>,
      sigma: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    refundUnsuccessSigner(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    requestRefer(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    sendReferRequest(
      nonce: PromiseOrValue<BigNumberish>,
      e: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    sendTransaction(
      index: PromiseOrValue<BigNumberish>,
      e: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    signReferRequest(
      nonce: PromiseOrValue<BigNumberish>,
      s: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    signTransaction(
      account: PromiseOrValue<string>,
      e: PromiseOrValue<BigNumberish>,
      r: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    startNewRound(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    startRequestRefer(
      account: PromiseOrValue<string>,
      nonce: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    unlockMR(
      index: PromiseOrValue<BigNumberish>,
      e: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    validityCheck(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
