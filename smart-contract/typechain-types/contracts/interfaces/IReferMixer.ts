/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export interface IReferMixerInterface extends utils.Interface {
  functions: {
    "moveToOnboardPhase()": FunctionFragment;
    "moveToSignPhase()": FunctionFragment;
    "recordReferMessage(address,uint256,uint256)": FunctionFragment;
    "recordReferRequest(address,uint256)": FunctionFragment;
    "recordReferSignature(uint256,uint256)": FunctionFragment;
    "resetPhaseControl()": FunctionFragment;
    "verifyReferSignature(address,uint256,uint256,uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "moveToOnboardPhase"
      | "moveToSignPhase"
      | "recordReferMessage"
      | "recordReferRequest"
      | "recordReferSignature"
      | "resetPhaseControl"
      | "verifyReferSignature"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "moveToOnboardPhase",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "moveToSignPhase",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "recordReferMessage",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "recordReferRequest",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "recordReferSignature",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "resetPhaseControl",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "verifyReferSignature",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "moveToOnboardPhase",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "moveToSignPhase",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "recordReferMessage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "recordReferRequest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "recordReferSignature",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "resetPhaseControl",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "verifyReferSignature",
    data: BytesLike
  ): Result;

  events: {
    "ReferMessageRecorded(address,uint256,uint256)": EventFragment;
    "ReferRequestRecorded(address,uint256)": EventFragment;
    "ReferSignatureRecorded(uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ReferMessageRecorded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ReferRequestRecorded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ReferSignatureRecorded"): EventFragment;
}

export interface ReferMessageRecordedEventObject {
  account: string;
  nonce: BigNumber;
  e: BigNumber;
}
export type ReferMessageRecordedEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  ReferMessageRecordedEventObject
>;

export type ReferMessageRecordedEventFilter =
  TypedEventFilter<ReferMessageRecordedEvent>;

export interface ReferRequestRecordedEventObject {
  account: string;
  nonce: BigNumber;
}
export type ReferRequestRecordedEvent = TypedEvent<
  [string, BigNumber],
  ReferRequestRecordedEventObject
>;

export type ReferRequestRecordedEventFilter =
  TypedEventFilter<ReferRequestRecordedEvent>;

export interface ReferSignatureRecordedEventObject {
  nonce: BigNumber;
  s: BigNumber;
}
export type ReferSignatureRecordedEvent = TypedEvent<
  [BigNumber, BigNumber],
  ReferSignatureRecordedEventObject
>;

export type ReferSignatureRecordedEventFilter =
  TypedEventFilter<ReferSignatureRecordedEvent>;

export interface IReferMixer extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IReferMixerInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    moveToOnboardPhase(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    moveToSignPhase(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    recordReferMessage(
      account: PromiseOrValue<string>,
      nonce: PromiseOrValue<BigNumberish>,
      e: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    recordReferRequest(
      account: PromiseOrValue<string>,
      nonce: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    recordReferSignature(
      nonce: PromiseOrValue<BigNumberish>,
      s: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    resetPhaseControl(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    verifyReferSignature(
      account: PromiseOrValue<string>,
      signerPubKey: PromiseOrValue<BigNumberish>,
      e: PromiseOrValue<BigNumberish>,
      s: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  moveToOnboardPhase(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  moveToSignPhase(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  recordReferMessage(
    account: PromiseOrValue<string>,
    nonce: PromiseOrValue<BigNumberish>,
    e: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  recordReferRequest(
    account: PromiseOrValue<string>,
    nonce: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  recordReferSignature(
    nonce: PromiseOrValue<BigNumberish>,
    s: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  resetPhaseControl(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  verifyReferSignature(
    account: PromiseOrValue<string>,
    signerPubKey: PromiseOrValue<BigNumberish>,
    e: PromiseOrValue<BigNumberish>,
    s: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    moveToOnboardPhase(overrides?: CallOverrides): Promise<void>;

    moveToSignPhase(overrides?: CallOverrides): Promise<void>;

    recordReferMessage(
      account: PromiseOrValue<string>,
      nonce: PromiseOrValue<BigNumberish>,
      e: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    recordReferRequest(
      account: PromiseOrValue<string>,
      nonce: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    recordReferSignature(
      nonce: PromiseOrValue<BigNumberish>,
      s: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    resetPhaseControl(overrides?: CallOverrides): Promise<void>;

    verifyReferSignature(
      account: PromiseOrValue<string>,
      signerPubKey: PromiseOrValue<BigNumberish>,
      e: PromiseOrValue<BigNumberish>,
      s: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "ReferMessageRecorded(address,uint256,uint256)"(
      account?: null,
      nonce?: null,
      e?: null
    ): ReferMessageRecordedEventFilter;
    ReferMessageRecorded(
      account?: null,
      nonce?: null,
      e?: null
    ): ReferMessageRecordedEventFilter;

    "ReferRequestRecorded(address,uint256)"(
      account?: null,
      nonce?: null
    ): ReferRequestRecordedEventFilter;
    ReferRequestRecorded(
      account?: null,
      nonce?: null
    ): ReferRequestRecordedEventFilter;

    "ReferSignatureRecorded(uint256,uint256)"(
      nonce?: null,
      s?: null
    ): ReferSignatureRecordedEventFilter;
    ReferSignatureRecorded(
      nonce?: null,
      s?: null
    ): ReferSignatureRecordedEventFilter;
  };

  estimateGas: {
    moveToOnboardPhase(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    moveToSignPhase(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    recordReferMessage(
      account: PromiseOrValue<string>,
      nonce: PromiseOrValue<BigNumberish>,
      e: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    recordReferRequest(
      account: PromiseOrValue<string>,
      nonce: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    recordReferSignature(
      nonce: PromiseOrValue<BigNumberish>,
      s: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    resetPhaseControl(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    verifyReferSignature(
      account: PromiseOrValue<string>,
      signerPubKey: PromiseOrValue<BigNumberish>,
      e: PromiseOrValue<BigNumberish>,
      s: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    moveToOnboardPhase(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    moveToSignPhase(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    recordReferMessage(
      account: PromiseOrValue<string>,
      nonce: PromiseOrValue<BigNumberish>,
      e: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    recordReferRequest(
      account: PromiseOrValue<string>,
      nonce: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    recordReferSignature(
      nonce: PromiseOrValue<BigNumberish>,
      s: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    resetPhaseControl(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    verifyReferSignature(
      account: PromiseOrValue<string>,
      signerPubKey: PromiseOrValue<BigNumberish>,
      e: PromiseOrValue<BigNumberish>,
      s: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
