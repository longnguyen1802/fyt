/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { ethers } from "ethers";
import {
  FactoryOptions,
  HardhatEthersHelpers as HardhatEthersHelpersBase,
} from "@nomiclabs/hardhat-ethers/types";

import * as Contracts from ".";

declare module "hardhat/types/runtime" {
  interface HardhatEthersHelpers extends HardhatEthersHelpersBase {
    getContractFactory(
      name: "MemberAccount",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MemberAccount__factory>;
    getContractFactory(
      name: "Cryptography",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Cryptography__factory>;
    getContractFactory(
      name: "ICryptography",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ICryptography__factory>;
    getContractFactory(
      name: "IMemberAccount",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IMemberAccount__factory>;
    getContractFactory(
      name: "IMoneyMixer",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IMoneyMixer__factory>;
    getContractFactory(
      name: "IProtocol",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IProtocol__factory>;
    getContractFactory(
      name: "IReferMixer",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IReferMixer__factory>;
    getContractFactory(
      name: "SafeCast",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SafeCast__factory>;
    getContractFactory(
      name: "MoneyMixer",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MoneyMixer__factory>;
    getContractFactory(
      name: "ReferMixer",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ReferMixer__factory>;
    getContractFactory(
      name: "Protocol",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Protocol__factory>;

    getContractAt(
      name: "MemberAccount",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MemberAccount>;
    getContractAt(
      name: "Cryptography",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Cryptography>;
    getContractAt(
      name: "ICryptography",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ICryptography>;
    getContractAt(
      name: "IMemberAccount",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IMemberAccount>;
    getContractAt(
      name: "IMoneyMixer",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IMoneyMixer>;
    getContractAt(
      name: "IProtocol",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IProtocol>;
    getContractAt(
      name: "IReferMixer",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IReferMixer>;
    getContractAt(
      name: "SafeCast",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.SafeCast>;
    getContractAt(
      name: "MoneyMixer",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MoneyMixer>;
    getContractAt(
      name: "ReferMixer",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ReferMixer>;
    getContractAt(
      name: "Protocol",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Protocol>;

    // default types
    getContractFactory(
      name: string,
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<ethers.ContractFactory>;
    getContractFactory(
      abi: any[],
      bytecode: ethers.utils.BytesLike,
      signer?: ethers.Signer
    ): Promise<ethers.ContractFactory>;
    getContractAt(
      nameOrAbi: string | any[],
      address: string,
      signer?: ethers.Signer
    ): Promise<ethers.Contract>;
  }
}
